################################################################################
# Copyright 2015 Benjamin Worpitz
#
# This file is part of alpaka.
#
# alpaka is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# alpaka is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with alpaka.
# If not, see <http://www.gnu.org/licenses/>.
################################################################################

################################################################################
#
################################################################################
language:
    - cpp

################################################################################
#
################################################################################
os:
    - linux

sudo: required
dist: trusty

################################################################################
#
################################################################################
compiler:
    - gcc
    - clang

################################################################################
# \TODO: Test full matrix:
# ALPAKA_INTEGRATION_TEST                       : {ON}
# CXX                                           : {g++, clang++}
#   [clang++] ALPAKA_CLANG_LIBSTDCPP_VERSION    : {4.9}
#   [clang++] ALPAKA_CLANG_VER                  : {3.5, 3.6, 3.7}
#   [g++] ALPAKA_GCC_VER                        : {4.9, 5}
# ALPAKA_BOOST_BRANCH                           : {boost-1.56.0, boost-1.57.0, boost-1.58.0, boost-1.59.0, develop}
# ALPAKA_CMAKE_VER                              : {3.3.0, 3.3.1, 3.3.2}
# CMAKE_BUILD_TYPE                              : {Debug, Release}
# ALPAKA_DEBUG                                  : {0, 1, 2}
# ALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE             : {ON, OFF}
# ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE         : {ON, OFF}
# ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE          : {ON, OFF}
# ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE            : {ON, OFF}
#   [ON] OMP_NUM_THREADS                        : {1, 2, 3, 4}
# ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE            : {ON, OFF}
#   [ON] OMP_NUM_THREADS                        : {1, 2, 3, 4}
# ALPAKA_ACC_CPU_BT_OMP4_ENABLE                 : {ON, OFF}
#   [ON] OMP_NUM_THREADS                        : {1, 2, 3, 4}
# ALPAKA_ACC_GPU_CUDA_ENABLE                    : {ON, OFF}
#   [ON] ALPAKA_CUDA_VERSION                    : {7.0, 7.5}
# And one analysis build
# ALPAKA_ANALYSIS                               : {ON, OFF}
################################################################################
env:
    global:
        - ALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON
        - ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE=ON
        - ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE=ON
        - ALPAKA_ACC_CPU_BT_OMP4_ENABLE=ON
        - ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE=ON
        - ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE=ON
        - ALPAKA_CLANG_LIBSTDCPP_VERSION=4.9

    matrix:
        - ALPAKA_CUDA_VERSION=7.5 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=2 ALPAKA_CMAKE_VER=3.3.2 CMAKE_BUILD_TYPE=Debug   OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.7 ALPAKA_BOOST_BRANCH=boost-1.56.0 ALPAKA_ACC_GPU_CUDA_ENABLE=ON
        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=0 ALPAKA_CMAKE_VER=3.3.1 CMAKE_BUILD_TYPE=Debug   OMP_NUM_THREADS=3 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.5 ALPAKA_BOOST_BRANCH=boost-1.57.0 ALPAKA_ACC_GPU_CUDA_ENABLE=ON
        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=2 ALPAKA_CMAKE_VER=3.3.0 CMAKE_BUILD_TYPE=Debug   OMP_NUM_THREADS=2 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.6 ALPAKA_BOOST_BRANCH=boost-1.58.0 ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=ON  ALPAKA_DEBUG=1 ALPAKA_CMAKE_VER=3.3.2 CMAKE_BUILD_TYPE=Debug   OMP_NUM_THREADS=4 ALPAKA_GCC_VER=5   ALPAKA_CLANG_VER=3.5 ALPAKA_BOOST_BRANCH=boost-1.59.0 ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=ON  ALPAKA_DEBUG=1 ALPAKA_CMAKE_VER=3.3.1 CMAKE_BUILD_TYPE=Debug   OMP_NUM_THREADS=4 ALPAKA_GCC_VER=5   ALPAKA_CLANG_VER=3.8 ALPAKA_BOOST_BRANCH=develop      ALPAKA_ACC_GPU_CUDA_ENABLE=OFF

        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=2 ALPAKA_CMAKE_VER=3.3.0 CMAKE_BUILD_TYPE=Release OMP_NUM_THREADS=4 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.7 ALPAKA_BOOST_BRANCH=boost-1.58.0 ALPAKA_ACC_GPU_CUDA_ENABLE=ON
        - ALPAKA_CUDA_VERSION=7.5 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=0 ALPAKA_CMAKE_VER=3.3.2 CMAKE_BUILD_TYPE=Release OMP_NUM_THREADS=3 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.5 ALPAKA_BOOST_BRANCH=boost-1.59.0 ALPAKA_ACC_GPU_CUDA_ENABLE=ON
        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=2 ALPAKA_CMAKE_VER=3.3.1 CMAKE_BUILD_TYPE=Release OMP_NUM_THREADS=2 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.6 ALPAKA_BOOST_BRANCH=boost-1.56.0 ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=0 ALPAKA_CMAKE_VER=3.3.0 CMAKE_BUILD_TYPE=Release OMP_NUM_THREADS=1 ALPAKA_GCC_VER=4.9 ALPAKA_CLANG_VER=3.5 ALPAKA_BOOST_BRANCH=boost-1.57.0 ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=1 ALPAKA_CMAKE_VER=3.3.2 CMAKE_BUILD_TYPE=Release OMP_NUM_THREADS=4 ALPAKA_GCC_VER=5   ALPAKA_CLANG_VER=3.8 ALPAKA_BOOST_BRANCH=develop      ALPAKA_ACC_GPU_CUDA_ENABLE=OFF

matrix:
    allow_failures:
        - compiler: gcc
          env: ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=ON  ALPAKA_DEBUG=1 ALPAKA_CMAKE_VER=3.3.1 CMAKE_BUILD_TYPE=Debug   OMP_NUM_THREADS=4 ALPAKA_GCC_VER=5   ALPAKA_CLANG_VER=3.8 ALPAKA_BOOST_BRANCH=develop      ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - compiler: gcc
          env: ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=1 ALPAKA_CMAKE_VER=3.3.2 CMAKE_BUILD_TYPE=Release OMP_NUM_THREADS=4 ALPAKA_GCC_VER=5   ALPAKA_CLANG_VER=3.8 ALPAKA_BOOST_BRANCH=develop      ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - compiler: clang
          env: ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=ON  ALPAKA_DEBUG=1 ALPAKA_CMAKE_VER=3.3.1 CMAKE_BUILD_TYPE=Debug   OMP_NUM_THREADS=4 ALPAKA_GCC_VER=5   ALPAKA_CLANG_VER=3.8 ALPAKA_BOOST_BRANCH=develop      ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - compiler: clang
          env: ALPAKA_CUDA_VERSION=7.0 ALPAKA_ANALYSIS=OFF ALPAKA_DEBUG=1 ALPAKA_CMAKE_VER=3.3.2 CMAKE_BUILD_TYPE=Release OMP_NUM_THREADS=4 ALPAKA_GCC_VER=5   ALPAKA_CLANG_VER=3.8 ALPAKA_BOOST_BRANCH=develop      ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
        - os: osx

branches:
  except:
     - doc

################################################################################
# Use this to prepare the system to install prerequisites or dependencies.
################################################################################
before_install:
    # Print the travis environment variables: http://docs.travis-ci.com/user/ci-environment/
    - echo "${TRAVIS_BRANCH}"
    - echo "${TRAVIS_BUILD_DIR}"
    - echo "${TRAVIS_BUILD_ID}"
    - echo "${TRAVIS_BUILD_NUMBER}"
    - echo "${TRAVIS_COMMIT}"
    - echo "${TRAVIS_COMMIT_RANGE}"
    - echo "${TRAVIS_JOB_ID}"
    - echo "${TRAVIS_JOB_NUMBER}"
    - echo "${TRAVIS_PULL_REQUEST}"
    - echo "${TRAVIS_SECURE_ENV_VARS}"
    - echo "${TRAVIS_REPO_SLUG}"
    - echo "${TRAVIS_OS_NAME}"
    - echo "${TRAVIS_TAG}"

    # g++ / clang dependencies
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test

    # clang
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.5 main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.6 main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then sudo add-apt-repository -y 'deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main' ;fi
    - if [ "${CXX}" == "clang++" ] ;then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add - ;fi

    # git
    - sudo add-apt-repository -y ppa:git-core/ppa

    - sudo apt-get update

################################################################################
# Use this to install any prerequisites or dependencies necessary to run your build.
################################################################################
install:
    # Step out of the alpaka directory.
    - cd ../../

    #-------------------------------------------------------------------------------
    # Install sloc
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then sudo apt-get install sloccount ;fi

    #-------------------------------------------------------------------------------
    # Install cppcheck
    # FIXME: Use a better static analysis tool. cppcheck does not support c++11 correctly.
    #- if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then sudo apt-get install cppcheck ;fi

    #-------------------------------------------------------------------------------
    # Get the current gcc version.
    - git --version
    - sudo apt-get -y install git
    - git --version

    #-------------------------------------------------------------------------------
    # gcc 4.6 is too old...
    - if [ "${CXX}" == "g++" ]
      ;then
          sudo apt-get -y install g++-${ALPAKA_GCC_VER}
          && sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${ALPAKA_GCC_VER} 50
          && sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${ALPAKA_GCC_VER} 50
      ;fi
    # Extract the version numbers.
    - if [ "${CXX}" == "g++" ]
      ;then
          ALPAKA_GCC_VER_MAJOR=${ALPAKA_GCC_VER:0:1}
          && ALPAKA_GCC_VER_MINOR=${ALPAKA_GCC_VER:2:1}
          && echo ${ALPAKA_GCC_VER_MAJOR}
          && echo ${ALPAKA_GCC_VER_MINOR}
      ;fi
    # gcc version 5+ requires boost-1.59.0+.
    - if [ "${CXX}" == "clang++" ]
      ;then
          if (( ${ALPAKA_GCC_VER_MAJOR} == 5 ))
          ;then
              export ALPAKA_BOOST_BRANCH=boost-1.59.0
              && echo ALPAKA_BOOST_BRANCH=${ALPAKA_BOOST_BRANCH} because gcc 5+ is only supported by boost 1.59+!
          ;fi
      ;fi

    #-------------------------------------------------------------------------------
    # Install clang.
    # We have to prepend /usr/bin to the path because else the preinstalled clang from usr/bin/local/ is used.
    - if [ "${CXX}" == "clang++" ]
      ;then
          sudo apt-get -y install libstdc++-${ALPAKA_CLANG_LIBSTDCPP_VERSION}-dev
          && sudo apt-get -y install clang-${ALPAKA_CLANG_VER}
          && sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${ALPAKA_CLANG_VER} 50
          && sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${ALPAKA_CLANG_VER} 50
          && sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 50
          && sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 50
          && export PATH=/usr/bin:$PATH
      ;fi
    # Extract the version numbers.
    - if [ "${CXX}" == "clang++" ]
      ;then
          ALPAKA_CLANG_VER_MAJOR=${ALPAKA_CLANG_VER:0:1}
          && ALPAKA_CLANG_VER_MINOR=${ALPAKA_CLANG_VER:2:1}
          && echo ${ALPAKA_CLANG_VER_MAJOR}
          && echo ${ALPAKA_CLANG_VER_MINOR}
      ;fi
    # clang versions lower than 3.7 do not support OpenMP 2.0, OpenMP 4.0 is not currently supported by any version.
    # However, clang 3.7 requires special compiler flags that are not automatically provided by CMake.
    - if [ "${CXX}" == "clang++" ]
      ;then
          if (( (( ${ALPAKA_CLANG_VER_MAJOR} < 3 )) || ( (( ${ALPAKA_CLANG_VER_MAJOR} == 3 )) && (( ${ALPAKA_CLANG_VER_MINOR} < 7 )) ) ))
          ;then
              if [ "${ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE}" == "ON" ]
              ;then
                  export ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE=OFF
                  && echo ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE=${ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE} because the clang version does not support it!
              ;fi
              && if [ "${ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE}" == "ON" ]
              ;then
                  export ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE=OFF
                  && echo ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE} because the clang version does not support it!
              ;fi
          ;fi
          && if (( (( ${ALPAKA_CLANG_VER_MAJOR} < 3 )) || ( (( ${ALPAKA_CLANG_VER_MAJOR} == 3 )) && (( ${ALPAKA_CLANG_VER_MINOR} < 8 )) ) ))
          ;then
              if [ "${ALPAKA_ACC_CPU_BT_OMP4_ENABLE}" == "ON" ]
              ;then
                  export ALPAKA_ACC_CPU_BT_OMP4_ENABLE=OFF
                  && echo ALPAKA_ACC_CPU_BT_OMP4_ENABLE=${ALPAKA_ACC_CPU_BT_OMP4_ENABLE} because the clang version does not support it!
              ;fi
          ;fi
      ;fi

    #-------------------------------------------------------------------------------
    # Extract the CUDA version numbers.
    - if [ "${ALPAKA_ACC_GPU_CUDA_ENABLE}" == "ON" ]
      ;then
          ALPAKA_CUDA_VER_MAJOR=${ALPAKA_CUDA_VERSION:0:1}
          && ALPAKA_CUDA_VER_MINOR=${ALPAKA_CUDA_VERSION:2:1}
          && echo ${ALPAKA_CUDA_VER_MAJOR}
          && echo ${ALPAKA_CUDA_VER_MINOR}
      ;fi
    # CUDA 7.x does not support gcc > 4.9.2
    - if [ "${ALPAKA_ACC_GPU_CUDA_ENABLE}" == "ON" ]
      ;then
          if [ "${CXX}" == "g++" ]
          ;then
              if (( (( ${ALPAKA_GCC_VER_MAJOR} > 4 )) || ( (( ${ALPAKA_GCC_VER_MAJOR} == 4 )) && (( ${ALPAKA_GCC_VER_MINOR} > 9 )) ) ))
              ;then
                  if (( ${ALPAKA_CUDA_VER_MAJOR} > 6 ))
                  ;then
                      export ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
                      && echo ALPAKA_ACC_GPU_CUDA_ENABLE=${ALPAKA_ACC_GPU_CUDA_ENABLE} because CUDA 7.0 does not support the gcc version!
                  ;fi
              ;fi
          ;fi
      ;fi
    # CUDA 7.0 does not support clang on linux.
    # CUDA 7.5 does not support clang > 3.6 on linux.
    # CUDA 7.5 for clang is buggy and does not compile alpaka correctly.
    - if [ "${ALPAKA_ACC_GPU_CUDA_ENABLE}" == "ON" ]
      ;then
          if [ "${CXX}" == "clang++" ]
          ;then
              if [ ${TRAVIS_OS_NAME} == "linux" ]
              ;then
                  if (( (( ${ALPAKA_CUDA_VER_MAJOR} == 7 )) && (( ${ALPAKA_CUDA_VER_MINOR} < 5 )) ))
                  ;then
                      export ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
                      && echo ALPAKA_ACC_GPU_CUDA_ENABLE=${ALPAKA_ACC_GPU_CUDA_ENABLE} because clang is not a supported compiler for CUDA 7.0 on linux!
                  ;elif (( (( ${ALPAKA_CUDA_VER_MAJOR} == 7 )) && (( ${ALPAKA_CUDA_VER_MINOR} == 5 )) ))
                  ;then
                      export ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
                      && echo ALPAKA_ACC_GPU_CUDA_ENABLE=${ALPAKA_ACC_GPU_CUDA_ENABLE} because the CUDA 7.5 clang support is buggy!
                      && if (( (( ${ALPAKA_CLANG_VER_MAJOR} > 3 )) || ( (( ${ALPAKA_CLANG_VER_MAJOR} == 3 )) && (( ${ALPAKA_CLANG_VER_MINOR} > 6 )) ) ))
                      ;then
                          export ALPAKA_ACC_GPU_CUDA_ENABLE=OFF
                          && echo ALPAKA_ACC_GPU_CUDA_ENABLE=${ALPAKA_ACC_GPU_CUDA_ENABLE} because clang versions higher then 3.6 are not a supported compiler for CUDA 7.5 on linux!
                      ;fi
                  ;fi
              ;fi
          ;fi
      ;fi
    # nvcc < 7.5 does not support boost correctly so fibers / threads have to be disabled.
    # boost/utility/detail/result_of_iterate.hpp:148:75: error: invalid use of qualified-name 'std::allocator_traits<_Alloc>::propagate_on_container_swap'
    - if [ "${ALPAKA_ACC_GPU_CUDA_ENABLE}" == "ON" ]
      ;then
          if (( (( ${ALPAKA_CUDA_VER_MAJOR} == 7 )) && (( ${ALPAKA_CUDA_VER_MINOR} < 5 )) ))
          ;then
              export ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE=OFF
              && echo ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE} because nvcc does not support boost correctly!
              && export ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE=OFF
              && echo ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE} because nvcc does not support boost correctly!
          ;fi
      ;fi
    # Install nvcc
    - if [ "${ALPAKA_ACC_GPU_CUDA_ENABLE}" == "ON" ]
      ;then
          if [ ${ALPAKA_CUDA_VER_MAJOR} == 7 ]
          ;then
              if [ ${ALPAKA_CUDA_VER_MINOR} == 0 ]
              ;then
                  ALPAKA_CUDA_PKG_FILE_NAME=cuda-repo-ubuntu1404-${ALPAKA_CUDA_VER_MAJOR}-${ALPAKA_CUDA_VER_MINOR}-local_${ALPAKA_CUDA_VERSION}-28_amd64.deb
                  && ALPAKA_CUDA_PKG_FILE_PATH=http://developer.download.nvidia.com/compute/cuda/${ALPAKA_CUDA_VER_MAJOR}_${ALPAKA_CUDA_VER_MINOR}/Prod/local_installers/rpmdeb/${ALPAKA_CUDA_PKG_FILE_NAME}
              ;elif [ ${ALPAKA_CUDA_VER_MINOR} == 5 ]
              ;then
                  ALPAKA_CUDA_PKG_FILE_NAME=cuda-repo-ubuntu1404-${ALPAKA_CUDA_VER_MAJOR}-${ALPAKA_CUDA_VER_MINOR}-local_${ALPAKA_CUDA_VERSION}-18_amd64.deb
                  && ALPAKA_CUDA_PKG_FILE_PATH=http://developer.download.nvidia.com/compute/cuda/${ALPAKA_CUDA_VERSION}/Prod/local_installers/${ALPAKA_CUDA_PKG_FILE_NAME}
              ;else
                  echo CUDA versions other then 7.0 and 7.5 are not currently supported!
              ;fi
          ;else
              echo CUDA versions other then 7.0 and 7.5 are not currently supported!
          ;fi
      ;fi
    - if [ "${ALPAKA_ACC_GPU_CUDA_ENABLE}" == "ON" ]
      ;then
          wget ${ALPAKA_CUDA_PKG_FILE_PATH}
          && sudo dpkg -i ${ALPAKA_CUDA_PKG_FILE_NAME}
          && sudo apt-get -y update
          && sudo apt-get -y install cuda-core-${ALPAKA_CUDA_VERSION} cuda-cudart-${ALPAKA_CUDA_VERSION} cuda-cudart-dev-${ALPAKA_CUDA_VERSION} cuda-curand-${ALPAKA_CUDA_VERSION} cuda-curand-dev-${ALPAKA_CUDA_VERSION}
          && sudo ln -s /usr/local/cuda-${ALPAKA_CUDA_VERSION} /usr/local/cuda
          && export PATH=/usr/local/cuda-${ALPAKA_CUDA_VERSION}/bin:$PATH
          && export LD_LIBRARY_PATH=/usr/local/cuda-${ALPAKA_CUDA_VERSION}/lib64:$LD_LIBRARY_PATH
          && sudo rm -f ${ALPAKA_CUDA_PKG_FILE_NAME}
      ;fi
    # Currently we do not install CUDA fully: sudo apt-get -y install cuda
    # We only install the minimal packages. Because of our manual partial installation we have to create a symlink at /usr/local/cuda

    #-------------------------------------------------------------------------------
    # CMake 2.8.7 is too old...
    # Remove the old version.
    - sudo apt-get -y remove cmake
    # Extract the version numbers.
    - ALPAKA_CMAKE_VER_MAJOR=${ALPAKA_CMAKE_VER:0:1}
    - echo ${ALPAKA_CMAKE_VER_MAJOR}
    - ALPAKA_CMAKE_VER_MINOR=${ALPAKA_CMAKE_VER:2:1}
    - echo ${ALPAKA_CMAKE_VER_MINOR}
    - ALPAKA_CMAKE_PKG_FILE_NAME=cmake-${ALPAKA_CMAKE_VER}-Linux-x86_64
    - wget http://www.cmake.org/files/v${ALPAKA_CMAKE_VER_MAJOR}.${ALPAKA_CMAKE_VER_MINOR}/${ALPAKA_CMAKE_PKG_FILE_NAME}.tar.gz
      && tar -xzf ${ALPAKA_CMAKE_PKG_FILE_NAME}.tar.gz
      && sudo cp -fR cmake-${ALPAKA_CMAKE_VER}-Linux-x86_64/* /usr
      && sudo rm -rf ${ALPAKA_CMAKE_PKG_FILE_NAME}.tar.gz ${ALPAKA_CMAKE_PKG_FILE_NAME}

    #-------------------------------------------------------------------------------
    # Clone boost.
    # If fibers are enabled we need boost develop branch.
    - if [ "${ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE}" == "ON" ]
      ;then
          if [ "${ALPAKA_BOOST_BRANCH}" != "develop" ]
          ;then
              export ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE=OFF
              && echo ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE} set because boost fibers requires boost develop branch!
          ;fi
      ;fi

    - git clone -b ${ALPAKA_BOOST_BRANCH} --recursive --single-branch --depth 1 https://github.com/boostorg/boost.git boost
    - cd boost/
    - export ALPAKA_BOOST_ROOT_DIR=`pwd`
    - echo "${ALPAKA_BOOST_ROOT_DIR}"

    - cd libs/

    # Clone boost.fiber.
    - if [ "${ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE}" == "ON" ]
      ;then
          git clone -b develop --single-branch --depth 1 https://github.com/olk/boost-fiber.git fiber
      ;fi

    - cd ../

    # Prepare building of boost.
    - sudo ./bootstrap.sh --with-toolset=${CC}
    # Create file links.
    - sudo ./b2 headers
    # Prepare the library destination directory.
    - cd ..
    - mkdir boost_libs
    - cd boost_libs/
    - mkdir x64
    - export ALPAKA_BOOST_LIB_DIR=`pwd`/x64/lib
    - echo "${ALPAKA_BOOST_LIB_DIR}"
    - cd ../
    - cd boost/

    # Create the boost build command.
    #  --layout=versioned
    - ALPAKA_BOOST_B2_CXXFLAGS=
    - ALPAKA_BOOST_B2="sudo ./b2 -j1 --layout=tagged --toolset=${CC}"
    - ALPAKA_BOOST_B2+=" architecture=x86 address-model=64 variant=debug,release link=static threading=multi runtime-link=shared"
    # Clang is not supported by the FindBoost script.
    # boost (especially old versions) produces too much warnings when using clang (newer versions) so that the 4 MiB log is too short.
    - if [ "${CXX}" == "clang++" ]
      ;then
          export ALPAKA_BOOST_COMPILER=-clang${ALPAKA_CLANG_VER_MAJOR}${ALPAKA_CLANG_VER_MINOR}
          && echo "${ALPAKA_BOOST_COMPILER}"
          && ALPAKA_BOOST_B2_CXXFLAGS+="-Wno-unused-local-typedef -Wno-c99-extensions -Wno-variadic-macros -Wunknown-warning-option"
      ;fi
    # Select the libraries required.
    - ALPAKA_BOOST_B2+=" --with-program_options"
    - if [ "${ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE}" == "ON" ]
      ;then
          ALPAKA_BOOST_B2_CXXFLAGS+=" -std=c++14"
          && ALPAKA_BOOST_B2+=" --with-fiber --with-context --with-thread --with-system --with-atomic --with-chrono --with-date_time"
      ;fi
    - if [ "${ALPAKA_BOOST_B2_CXXFLAGS}" != "" ]
      ;then
          ALPAKA_BOOST_B2+=' cxxflags="'
          ALPAKA_BOOST_B2+="${ALPAKA_BOOST_B2_CXXFLAGS}"
          ALPAKA_BOOST_B2+='"'
      ;fi
    - ALPAKA_BOOST_B2+=" --stagedir=../boost_libs/x64 stage"
    # Build boost.
    - echo "${ALPAKA_BOOST_B2}"
    - eval "${ALPAKA_BOOST_B2}"

    # Clean the intermediate build files.
    - sudo rm -rf bin.v2

    - cd ../

################################################################################
# Use this to prepare your build for testing.
################################################################################
before_script:
    - cd ${TRAVIS_BUILD_DIR}/
    - pwd

    - which cmake
    - cmake --version

    - which ${CXX}
    - ${CXX} -v

    - if [ "${ALPAKA_ACC_GPU_CUDA_ENABLE}" == "ON" ]
      ;then
          which nvcc
          && nvcc -V
      ;fi

################################################################################
# All commands must exit with code 0 on success. Anything else is considered failure.
################################################################################
script:
    #-------------------------------------------------------------------------------
    # sloc
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then sloccount . ;fi

    #-------------------------------------------------------------------------------
    # TODO/FIXME/HACK
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then grep -r HACK * ;fi || true
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then grep -r FIXME * ;fi || true
    - if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then grep -r TODO * ;fi || true

    #-------------------------------------------------------------------------------
    # cppcheck
    #  --inline-suppr
    # Once only with errors returning a failure on error.
    #- if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then cppcheck --force --verbose --error-exitcode=1 -j2 vectorAdd/src/ matMul/src/ sharedMem/src/ mandelbrot/src/ ;fi
    # Once with warnings but no failure return code.
    #- if [ "${ALPAKA_ANALYSIS}" == "ON" ] ;then cppcheck --force --verbose --enable=all -j2 vectorAdd/src/ matMul/src/ sharedMem/src/ mandelbrot/src/ ;fi

    #-------------------------------------------------------------------------------
    # analysis
    #- if [ "${ALPAKA_ANALYSIS}" == "ON" -a "${CXX}" == "clang++" ] ;then export CCC_CC=clang ;fi
    #- if [ "${ALPAKA_ANALYSIS}" == "ON" -a "${CXX}" == "clang++" ] ;then export CCC_CXX=clang++ ;fi
    #- if [ "${ALPAKA_ANALYSIS}" == "ON" -a "${CXX}" == "clang++" ]
    #  ;then
    #      cd mandelbrot/
    #      && mkdir build/
    #      && cd build/
    #      && mkdir analyze/
    #      && cd analyze/
    #      && scan-build -h
    #      && scan-build -analyze-headers cmake
    #        -G "Unix Makefiles"
    #        -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
    #        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    #        -DBOOST_ROOT="${ALPAKA_BOOST_ROOT_DIR}" -DBOOST_LIBRARYDIR="${ALPAKA_BOOST_LIB_DIR}" -DBoost_COMPILER="${ALPAKA_BOOST_COMPILER}" -DBoost_USE_STATIC_LIBS=ON -DBoost_USE_MULTITHREADED=ON -DBoost_USE_STATIC_RUNTIME=OFF
    #        -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE} -DALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE} -DALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE} -DALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE=${ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE} -DALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE=${ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE} -DALPAKA_ACC_GPU_CUDA_ENABLE=${ALPAKA_ACC_GPU_CUDA_ENABLE}
    #        -DALPAKA_DEBUG=${ALPAKA_DEBUG} -DALPAKA_INTEGRATION_TEST=ON -DALPAKA_CUDA_VERSION=${ALPAKA_CUDA_VERSION}
    #        "../../"
    #      && scan-build -analyze-headers --status-bugs make VERBOSE=1
    #      && cd ../../../
    #  ;fi

    #-------------------------------------------------------------------------------

    #-------------------------------------------------------------------------------
    # Build and execute all integration tests.
    - ./travis/compileExec.sh "test/integ/axpy/" ./axpy
    - ./travis/compileExec.sh "test/integ/mandelbrot/" ./mandelbrot
    - ./travis/compileExec.sh "test/integ/matMul/" ./matMul
    - ./travis/compileExec.sh "test/integ/sharedMem/" ./sharedMem

    #-------------------------------------------------------------------------------

    # Build and execute all examples.
    - ./travis/compileExec.sh "example/bufferCopy" ./bufferCopy        
    - ./travis/compileExec.sh "example/helloWorld" ./helloWorld
    - ./travis/compileExec.sh "example/helloWorldLambda" ./helloWorldLambda    
    - ./travis/compileExec.sh "example/vectorAdd" ./vectorAdd


################################################################################
#
################################################################################
notifications:
    email: false
